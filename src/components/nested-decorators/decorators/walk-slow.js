// import decMethod from '../../../../core/decorate-method';const chalk = require('chalk');const Promise = require('bluebird');export default function WalkSlow(target) {  const decMethod = (method, classVar, methodName) => {    let descriptor = {      value: classVar.prototype[methodName],      enumerable: false,      enumerable: true,      writable: true    }    descriptor = method(classVar.prototype, methodName, descriptor);    Object.defineProperty(classVar.prototype, methodName, descriptor);    return classVar;  }  /**   * Ask for a password,   * - before handleTrigger   */  let walk = function(target,key, descriptor) {    const callback = descriptor.value;    return {      ...descriptor,      value() {        const args = arguments;        return new Promise((resolve) => {          setTimeout(() => {            resolve(callback.apply(this, args));          }, 2000);        })      }    }  };  // class Decorator extends React.Component {  //   render() {  //     console.error('password render');  //     return (  //       <ComposedComponent {...this.props} />  //     );  //   }  // };  return decMethod(walk, target, 'walk');  return target;}