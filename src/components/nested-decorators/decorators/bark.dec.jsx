// import decMethod from '../../../../core/decorate-method';export default function Name(target) {  const decMethod = (decorator, method, classVar, methodName) => {    let descriptor = {      value: classVar.prototype[methodName],      enumerable: false,      enumerable: true,      writable: true    }    descriptor = method(classVar.prototype, methodName, descriptor);    Object.defineProperty(classVar.prototype, methodName, descriptor);    Object.defineProperty(decorator.prototype, methodName, descriptor);  }  /**   * Ask for a password,   * - before handleTrigger   */  let bark = function(target,key, descriptor) {    const callback = descriptor.value;    return {      ...descriptor,      value() {        const args = arguments;        if(typeof callback === 'function') {          callback.apply(this, args);        }        return 'Bark bark';      }    }  };  // class Decorator extends React.Component {  //   render() {  //     console.error('password render');  //     return (  //       <ComposedComponent {...this.props} />  //     );  //   }  // };  decMethod(target, bark, target, 'bark');  return target;}