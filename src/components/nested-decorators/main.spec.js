import {expect} from 'chai';const chalk = require('chalk');const _ = require('lodash');Function.prototype.clone = function() {  var that = this;  var temp = function temporary() { return that.apply(this, arguments); };  for(var key in this) {    if (this.hasOwnProperty(key)) {      temp[key] = this[key];    }  }  return temp;};// IMPORT DECORATORSimport bark from './decorators/bark.dec';import fly from './decorators/fly.dec';import flyStyle from './decorators/fly-style.dec';import walkSlow from './decorators/walk-slow';// Import Main Classimport Main from './main';describe('nested-decorators', function () {  let inst    = null;  let Comp    = Main;  // To be defined  it('Component should be defined', function () {    expect(Comp).to.be.defined;  });  it('Component should be defined                   ( decorated )', function () {    let ClassCopy = class Test extends Main{};    let DecClass = fly(flyStyle(bark(ClassCopy)));    expect(DecClass).to.be.defined;  });  // To have instance  it('Component should create instance', function() {    inst = new Comp();    expect(inst).to.be.defined;  });  it('Component should create instance              ( decorated )', function() {    let ClassCopy = class Test extends Main{};    let DecClass = fly(flyStyle(bark(ClassCopy)));    let decInst = new DecClass();    expect(decInst).to.be.defined;  });  // To have Bark()  it('Component should NOT have bark() method', function () {    expect(inst.bark).to.be.undefined;  });  it('Component should have bark() method           ( decorated )', function () {    let ClassCopy = class Test extends Main{};    let DecClass = fly(flyStyle(bark(ClassCopy)));    let decInst = new DecClass();    expect(decInst.bark).to.be.defined;  });  // To output bark()  it('Component.bark() should not be a function', function() {    expect(typeof inst.bark).to.not.be.equal('function');  });  it('Component.bark() should output "Bark bark"    ( decorated )', function() {    let ClassCopy = class Test extends Main{};    let DecClass = fly(flyStyle(bark(ClassCopy)));    let decInst = new DecClass();    expect(decInst.bark()).to.be.equal('Bark bark');  });  // To fly  it('Component.fly() should output false', function() {    expect(inst.fly()).to.be.false;  });  it('Component.fly() should output true            ( decorated )', function() {    let ClassCopy = class Test extends Main{};    let DecClass = fly(bark(ClassCopy));    let decInst = new DecClass();    expect(decInst.fly()).to.be.true;  });  it('Component.fly() should output swing           ( decorated )', function() {    let ClassCopy = class Test extends Main{};    let DecClass = fly(flyStyle(bark(ClassCopy)));    let decInst = new DecClass();    expect(decInst.fly()).to.be.equal('swing');  });  it('Component.walk() should output true', function() {    let ClassCopy = class Test extends Main{};    let DecClass = ClassCopy;    let decInst = new DecClass();    expect(decInst.walk()).to.be.true;  });  it('Component.walk() should output promise        ( decorated )', function(done) {    this.timeout(6000);    let ClassCopy = class Test extends Main{};    let DecClass = walkSlow(walkSlow(ClassCopy));    let decInst = new DecClass();    decInst.walk().then((res) => {      expect(res).to.be.true;      done();    })  });});