import {expect} from 'chai';const chalk = require('chalk');const _ = require('lodash');import React from 'react';import { mount, shallow, render  } from 'enzyme';/** * Helper method for it: (decorator) * @param desc * @returns {string} */function itDec(desc) {  let decPos = 50; let l = desc.length; desc += ' '; for(let x = decPos - l; x >=0; x--) { desc += '-'; } desc += ' '; desc += '(decorated)'; return desc;}// IMPORT DECORATORSimport bark from './decorators/bark.dec';import slow from './decorators/slow.dec';// Import Main Classimport Main from './main';describe('nested-decorators-react', function () {  let inst    = null;  let decInst = null;  let Comp    = Main;  // To be defined  it('React Component should be defined', function () {    expect(Comp).to.be.defined;  });  it('React Component should mount', function () {    const context = { };    const childContextTypes = {};    inst = shallow (      <Comp />,      { context : context, childContextTypes : childContextTypes }    );    expect(inst.find('#main').length).to.be.equal(1);  });  it(itDec('React Component should mount'), function () {    const context = { };    const childContextTypes = {};    let Copy = class CompDec extends Comp{};    let CompDec = slow(slow(bark(Copy)));    decInst = shallow (      <CompDec />,      { context : context, childContextTypes : childContextTypes }    );    expect(decInst.find('#main').length).to.be.equal(1);  });  it('React Component should not have bark method)', function () {    expect(inst.instance().bark).to.be.undefined;  });  it(itDec('React Component should have bark method'), function () {    expect(decInst.instance().bark).to.not.be.undefined;  });  it(itDec('React Component bark should return bark bark'), function () {    expect(decInst.instance().bark()).to.be.equal('Bark bark');  });  it('React Component walk should return true)', function () {    expect(inst.instance().walk()).to.be.true;  });  it(itDec('React Component walk output promise'), function (done) {    let walk = decInst.instance().walk();    walk.then((res) => {      expect(res).to.not.be.false;      done();    })  });});