/** * Much newer decorateMethod, prefered for release * @param methodName * @param target * @param method */export function decorateMethod(methodName, target, method) {  // decMethod(target, bark, target, 'bark');  const decMethod = (target, methodName, method) => {    let descriptor = {      value: target.prototype[methodName],      enumerable: false,      enumerable: true,      writable: true    }    descriptor = method(target.prototype, methodName, descriptor);    Object.defineProperty(target.prototype, methodName, descriptor);  }  decMethod(target, methodName, function(target, methodName, descriptor) {    const callback = descriptor.value;    return {      ...descriptor,      value: method(target, callback)    }  });}